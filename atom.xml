<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小鱼吃猫的博客</title>
  
  <subtitle>学习如何做一名合格的程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-30T13:57:39.591Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lyn4ever</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java自定义注解</title>
    <link href="http://yoursite.com/2019/10/30/Java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/30/Java自定义注解/</id>
    <published>2019-10-30T13:46:38.000Z</published>
    <updated>2019-10-30T13:57:39.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在Java框架中，经常会使用注解，而且还可以省很多事，来了解下自定义注解。"><a href="#在Java框架中，经常会使用注解，而且还可以省很多事，来了解下自定义注解。" class="headerlink" title="在Java框架中，经常会使用注解，而且还可以省很多事，来了解下自定义注解。"></a>在Java框架中，经常会使用注解，而且还可以省很多事，来了解下自定义注解。</h3><blockquote><p>   注解是一种能被添加到java代码中的元数据，类、方法、变量、参数和包都可以用注解来修饰。注解对于它所修饰的代码并没有直接的影响</p><h4 id="先写一个自己的注解类"><a href="#先写一个自己的注解类" class="headerlink" title="先写一个自己的注解类"></a>先写一个自己的注解类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span> <span class="comment">//会被javadoc命令识别</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//相当于作用时期，比如：运行期、编译期</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;) <span class="comment">//相当于作用域,比如方法、类</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyValue &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//也可以这么写,就是说，它的默认值是hello</span></span><br><span class="line">    <span class="comment">//String value() default "hello";</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后解析上边用到的那两个类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</span><br><span class="line">SOURCE,</span><br><span class="line">CLASS,</span><br><span class="line">RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line">    FIELD,</span><br><span class="line">    METHOD,</span><br><span class="line">    PARAMETER,</span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line">    PACKAGE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，是两个枚举类，也就是我们自定义的注解有一定的时间和空间作用域。<br>好了，我们的自定义注解已经完成了（对的，自定义注解就上边那一段代码），那我们就来看看要怎么有用呢？很容易啊，就和其他的注解一样，写在我们要用到的地方就好了。（对的，我确定不是在开玩笑）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    </span><br><span class="line">    @MyValue(value=&quot;张三&quot;)</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    为什么要写setter和getter，很快你就会知道</span><br><span class="line">     */</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后我们在其他地方去拿<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">System.out.println(person.getName());<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这就很难受，按道理来说，不是应该是张三吗？</span></span><br></pre></td></tr></table></figure><br>大家都知道，像Spring这种框架都是通过反射来实现的，我们就模拟一个“编译类”,我们是在属性上用的注解，所以就先用反射来拿到类的所有属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按理来说，我们是拿到这个Person.class的所有的属性，然后遍历，来挨个注入，但是这里我们明明确我们的属性名，所以就简单化了</span></span><br><span class="line">        Field   field = Person.class.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        MyValue annotation = field.getAnnotation(MyValue.class);<span class="comment">//拿到注解类</span></span><br><span class="line"></span><br><span class="line">        String name = annotation.value();<span class="comment">//这个value()就是我们在MyValue类中的的属性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//然后我们就注入到这个类中，这时就用到了setter方法</span></span><br><span class="line">        person.setName(name);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"通过自定义注解后的person的name是："</span> + person.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>是的，这样我们就通过了自定义注解给Person注入了一个name属性，但是在实际运用中不可能这么复杂，这只是入门了一下，我们可以将这个“模拟的编译类”组装成一个工具类，以便我们在实际中运用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在Java框架中，经常会使用注解，而且还可以省很多事，来了解下自定义注解。&quot;&gt;&lt;a href=&quot;#在Java框架中，经常会使用注解，而且还可以省很多事，来了解下自定义注解。&quot; class=&quot;headerlink&quot; title=&quot;在Java框架中，经常会使用注解，而
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
</feed>
